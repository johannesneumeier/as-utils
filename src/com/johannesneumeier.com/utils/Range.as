/** * defines a range from number _min to number _max */package com.johannesneumeier.utils {		public class Range 	{				private var _min:Number;		private var _max:Number;				public function Range(min:Number, max:Number) 		{			_min = min < max ? min : max;			_max = max > min ? max : min;		}				/**		 * test if number is within this range		 *		 * @param Number number 		  - check this number if it is within this range		 * @param Boolean includingBounds - flag signaling if a value that is min or 		 *									max of these bounds is regarded as within range or not		 */		public function inRange(number:Number, includingBounds:Boolean = false):Boolean 		{			if (includingBounds) {				return (number >= _min && number <= _max) ? true : false;			} else {				return (number > _min && number < _max) ? true : false;			}		}		/**		 *		 */		public function overlapsWith(range:Range):Boolean 		{			if (range.inRange(_min) || range.inRange(_max)) {				return true;			} else {				return false;			}		}				/**		 * get this range absolute numeric span		 */		public function getRange():Number 		{			return _max - _min;		}	}	}