/** * Helper for conversions of different type */package com.johannesneumeier.utils {		public class Conversion 	{				/**		 * parse a real number from a string (with a comma separated number)		 *		 * TODO: no real number parser, rather a eu->us floating point conversion for display		 *		 * @param str String - input that gets converted to number		 * @example parseNumber("12,34") -> 12.34		 */		public static function parseNumber(str:String):Number 		{			return Number(str.replace(",", "."));		}				/**		 * parse a number into a string in european comma separated writing style		 *		 * @param num Number - input to convert to a string		 */		public static function parseNumberStr(num:Number):String 		{			return String(num).replace(".", ",");		}				/**		 * convert a Number to a string with digits comma separated and rounded to num decimals		 *		 * @param decimals int - how many decimals after the comma should the returned string have		 *						 inserts zeros		 * @example euNumberWithDecimals(12.34567777, 2) -> "12,36"		 * @example euNumberWithDecimals(12.3, 2) -> "12,30"		 */		public static function euNumberWithDecimals(num:Number, 			decimals:int = 2, fillZero:Boolean = false):String 		{			var accuracy:int = Math.pow(10, decimals);			num = Math.round(num * accuracy) / accuracy;			var numStr:String = parseNumberStr(num);			if (fillZero && numStr == "0") {				numStr = "0,0";			}			if (numStr.indexOf(",") > -1) {				while (numStr.substring(numStr.indexOf(",") + 1).length < decimals) {					numStr += "0";				}			}			return numStr;		}		/**		 * format a time in seconds into a HH:MM:SS string		 *		 * @param s Number		 */		public static function formatVideoTime(s:Number, rounded:Boolean = true):String 		{			var hours:int;			var mins:int;			var secs:int;			var hoursStr:String;			var minsStr:String;			var secsStr:String;			if (rounded) {				s = Math.round(s);			}			secs = Math.round(s % 60);			mins = Math.floor(s / 60);			if (mins > 59) {				mins = Math.round(mins % 60);				hours = Math.floor(mins / 60);			} else {				hours = 0;			}			secsStr = secs.toString();			while (secsStr.length < 2) {				secsStr = "0" + secsStr;			}			minsStr = mins.toString();			while (minsStr.length < 2) {				minsStr = "0" + minsStr;			}			hoursStr = hours.toString();			if (hoursStr.length < 2) {				hoursStr = "0" + hoursStr;			}			return hours > 0 ? String(hoursStr + ":" + minsStr + ":" + secsStr) : String(minsStr + ":" + secsStr);		}	}	}